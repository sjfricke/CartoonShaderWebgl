<!doctype html>
<html lang="en" >
<head>
    <meta charset="utf-8">
    <title>My first Three.js app</title>
    <style>
      body { margin: 0; overflow:hidden; }
      canvas { width: 100%; height: 100% }
    </style>
<title>Cartoon Shader</title>
    <link type="text/css" rel="stylesheet" href="css/style.css">

    <script src="lib/three.min.js" type="text/javascript"></script>
    <script src="lib/OrbitControls.js" type="text/javascript"></script>
    <script src="lib/dat.gui.min.js" type="text/javascript"></script>
    <script src="lib/OBJLoader.js" type="text/javascript"></script>
    <script src="lib/MTLLoader.js" type="text/javascript"></script>

    <script src="js/FPSButton.js" type="text/javascript"></script>
    <script src="js/PauseButton.js" type="text/javascript"></script>
    <script src="js/Engine.js" type="text/javascript"></script>
    <script src="js/Main.js" type="text/javascript"></script>
    <script src="js/EventHandler.js" type="text/javascript"></script>
<script id="post-vert" type="x-shader/x-vertex">
      varying vec2 vUv;

      void main() {
        vUv = uv;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    </script>
    <script id="post-frag" type="x-shader/x-fragment">
      #include <packing>

      varying vec2 vUv;
      uniform sampler2D tDiffuse;
      uniform sampler2D tDepth;
      uniform float cameraNear;
      uniform float cameraFar;
      
      uniform int filterMode;


      float readDepth (sampler2D depthSampler, vec2 coord) {
        float fragCoordZ = texture2D(depthSampler, coord).x;
        float viewZ = viewZToPerspectiveDepth( fragCoordZ, cameraNear, cameraFar );
        return perspectiveDepthToViewZ( viewZ, cameraNear, cameraFar );
      }

      void main() {
        vec3 diffuse = texture2D(tDiffuse, vUv).rgb;
        float depth1 = readDepth(tDepth, vUv);
        float depth2 = texture2D(tDepth, vUv).x;
        
        if(filterMode == 0 || filterMode == 1) {
            gl_FragColor.rgb = vec3(diffuse);
        }
        else if (filterMode == 2) {
            gl_FragColor.rgb = vec3(depth1);
        }
        else if (filterMode == 3) {
            gl_FragColor.rgb = vec3(depth2);
        }
        else {
            gl_FragColor.rgb = vec3(1.0 - depth2);
        }
        gl_FragColor.a = 1.0;
      }
    </script>

</head>

<body>

<script id="fragmentShader" type="x-shader/x-fragment">
uniform float time;
uniform vec3 outColor;

void main( void ) {
    gl_FragColor = vec4( outColor, gl_FragColor.w );
}

</script>

<script id="vertexShader" type="x-shader/x-vertex">
void main()
        {
            vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
            gl_Position = projectionMatrix * mvPosition;
        }
</script>



</body>
</html>