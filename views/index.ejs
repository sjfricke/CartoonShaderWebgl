<!doctype html>
<html lang="en" >
<head>
    <meta charset="utf-8">
    <title>Depth-based Toon Shader</title>
    <style>
      body { margin: 0; overflow:hidden; }
      canvas { width: 100%; height: 100%; }
    </style>
<title>Cartoon Shader</title>
    <link type="text/css" rel="stylesheet" href="css/style.css">

    <script src="lib/three.min.js" type="text/javascript"></script>
    <script src="lib/OrbitControls.js" type="text/javascript"></script>
    <script src="lib/dat.gui.min.js" type="text/javascript"></script>
    <script src="lib/OBJLoader.js" type="text/javascript"></script>
    <script src="lib/MTLLoader.js" type="text/javascript"></script>

    <script src="js/FPSButton.js" type="text/javascript"></script>
    <script src="js/PauseButton.js" type="text/javascript"></script>
    <script src="js/ResetButton.js" type="text/javascript"></script>
    <script src="js/EventHandler.js" type="text/javascript"></script>
    <script src="js/gui.js" type="text/javascript"></script>

    <script src="js/Engine.js" type="text/javascript"></script>
    <script src="js/main.js" type="text/javascript"></script>


    <script id="post-vert" type="x-shader/x-vertex">
      varying vec2 vUv;

      void main() {
        vUv = uv;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    </script>
    <script id="post-frag" type="x-shader/x-fragment">
      #include <packing>

      varying vec2 vUv;
      uniform float uvdx;
      uniform float uvdy;
      uniform sampler2D tDiffuse;
      uniform sampler2D tDepth;
      uniform float cameraNear;
      uniform float cameraFar;
      
      uniform int filterMode;

      vec3 sobel (sampler2D sampler, vec2 uv, float dx, float dy) {
      
        float a = texture2D(sampler, vec2(uv.x - dx, uv.y - dy)).x;
        float b = texture2D(sampler, vec2(uv.x, uv.y - dy)).x;
        float c = texture2D(sampler, vec2(uv.x + dx, uv.y - dy)).x;
        float d = texture2D(sampler, vec2(uv.x - dx, uv.y)).x;
        float e = texture2D(sampler, vec2(uv.x, uv.y)).x;
        float f = texture2D(sampler, vec2(uv.x + dx, uv.y)).x;
        float g = texture2D(sampler, vec2(uv.x - dx, uv.y + dy)).x;
        float h = texture2D(sampler, vec2(uv.x, uv.y + dy)).x;
        float i = texture2D(sampler, vec2(uv.x + dx, uv.y + dy)).x;
        
        float magX = 0.0;
        magX += a * (-1.0); magX += b * (0.0); magX += c * (1.0);
        magX += d * (-2.0); magX += e * (0.0); magX += f * (2.0);
        magX += g * (-1.0); magX += h * (0.0); magX += i * (1.0);
        
        float magY = 0.0;
        magY += a * (-1.0); magY += b * (-2.0); magY += c * (-1.0);
        magY += d * (0.0); magY += e * (0.0); magY += f * (0.0);
        magY += g * (1.0); magY += h * (2.0); magY += i * (1.0);
        
        float mag = 1.0 - 10.0 * sqrt(magX * magX + magY * magY);
        if(mag > 0.6) {
            mag = 1.0;
        }
        return vec3(mag);
        
      }
      
      vec3 sobelRGB (sampler2D sampler, vec2 uv, float dx, float dy) {
        
        // Pixels:
        // a b c
        // d e f
        // g h i
        float a = texture2D(sampler, vec2(uv.x - dx, uv.y - dy)).x;
        float b = texture2D(sampler, vec2(uv.x, uv.y - dy)).x;
        float c = texture2D(sampler, vec2(uv.x + dx, uv.y - dy)).x;
        float d = texture2D(sampler, vec2(uv.x - dx, uv.y)).x;
        float e = texture2D(sampler, vec2(uv.x, uv.y)).x;
        float f = texture2D(sampler, vec2(uv.x + dx, uv.y)).x;
        float g = texture2D(sampler, vec2(uv.x - dx, uv.y + dy)).x;
        float h = texture2D(sampler, vec2(uv.x, uv.y + dy)).x;
        float i = texture2D(sampler, vec2(uv.x + dx, uv.y + dy)).x;
        
        float magX = 0.0;
        magX += a * (-1.0); magX += b * (0.0); magX += c * (1.0);
        magX += d * (-2.0); magX += e * (0.0); magX += f * (2.0);
        magX += g * (-1.0); magX += h * (0.0); magX += i * (1.0);
        
        float magY = 0.0;
        magY += a * (-1.0); magY += b * (-2.0); magY += c * (-1.0);
        magY += d * (0.0); magY += e * (0.0); magY += f * (0.0);
        magY += g * (1.0); magY += h * (2.0); magY += i * (1.0);
        
        return normalize(vec3(magX, magY, 0.2));
        
      }
      
      vec3 blurredSobel (sampler2D sampler, vec2 uv, float dx, float dy) {
        // Blur Strength per pixel:
        // (center is the active pixel)
        //       1
        //    2  4  2
        // 1  4 16  4  1
        //    2  4  2
        //       1
        vec3 blurredSobel = 
            // main pixel
            ( 16.0 * sobel(sampler, uv, dx, dy)
            
            // inner side pixels
            + 4.0 * sobel(sampler, vec2(uv.x + 2.0*dx, uv.y), dx, dy)
            + 4.0 * sobel(sampler, vec2(uv.x, uv.y + 2.0*dy), dx, dy)
            + 4.0 * sobel(sampler, vec2(uv.x - 2.0*dx, uv.y), dx, dy)
            + 4.0 * sobel(sampler, vec2(uv.x, uv.y - 2.0*dy), dx, dy)
            
            // border pixels
            + 2.0 * sobel(sampler, vec2(uv.x + 2.0*dx, uv.y + 2.0*dy), dx, dy)
            + 2.0 * sobel(sampler, vec2(uv.x - 2.0*dx, uv.y - 2.0*dy), dx, dy)
            + 2.0 * sobel(sampler, vec2(uv.x - 2.0*dx, uv.y + 2.0*dy), dx, dy)
            + 2.0 * sobel(sampler, vec2(uv.x + 2.0*dx, uv.y - 2.0*dy), dx, dy)
            
            // outer side pixels
            + sobel(sampler, vec2(uv.x + 3.0*dx, uv.y), dx, dy)
            + sobel(sampler, vec2(uv.x, uv.y + 3.0*dy), dx, dy)
            + sobel(sampler, vec2(uv.x - 3.0*dx, uv.y), dx, dy)
            + sobel(sampler, vec2(uv.x, uv.y - 3.0*dy), dx, dy) ) / 44.0;
        return blurredSobel;
      }

      float readDepth (sampler2D depthSampler, vec2 coord) {
        float fragCoordZ = texture2D(depthSampler, coord).x;
        float viewZ = viewZToPerspectiveDepth( fragCoordZ, cameraNear, cameraFar );
        return perspectiveDepthToViewZ( viewZ, cameraNear, cameraFar );
      }

      void main() {
        vec3 diffuse = texture2D(tDiffuse, vUv).rgb;
        float depth1 = readDepth(tDepth, vUv);
        float depth2 = texture2D(tDepth, vUv).x;
        
        if(filterMode == 0) {
            gl_FragColor.rgb = vec3(diffuse) * blurredSobel(tDepth, vUv, uvdx, uvdy);
        }
        else if (filterMode == 1) {
            gl_FragColor.rgb = vec3(diffuse);
        }
        else if (filterMode == 2) {
            gl_FragColor.rgb = vec3(depth1);
        }
        else if (filterMode == 3) {
            gl_FragColor.rgb = vec3(depth2);
        }
        else if(filterMode == 4) {
            gl_FragColor.rgb = vec3(1.0 - depth2);
        }
        else if(filterMode == 5) {
            gl_FragColor.rgb = sobel(tDepth, vUv, uvdx, uvdy);
        }
        else if(filterMode == 6){
            gl_FragColor.rgb = sobelRGB(tDepth, vUv, uvdx, uvdy);
        }
        else {
            gl_FragColor.rgb = blurredSobel(tDepth, vUv, uvdx, uvdy);
        }
        gl_FragColor.a = 1.0;
      }
    </script>

</head>

<body>

<script id="fragmentShader" type="x-shader/x-fragment">
uniform float time;
uniform vec3 outColor;
varying vec3 fnormal;

void main( void ) {
    gl_FragColor = viewMatrix*vec4( fnormal, gl_FragColor.w );
}

</script>

<script id="vertexShader" type="x-shader/x-vertex">
varying vec3 fnormal;
void main()
        {
            vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
            gl_Position = projectionMatrix * mvPosition;
            fnormal = normal;
        }
</script>



</body>
</html>