<!doctype html>
<html lang="en" >
<head>
    <meta charset="utf-8">
    <title>My first Three.js app</title>
    <style>
      body { margin: 0; overflow:hidden; }
      canvas { width: 100%; height: 100% }
    </style>
<title>Cartoon Shader</title>
    <link type="text/css" rel="stylesheet" href="css/style.css">

    <script src="lib/three.min.js" type="text/javascript"></script>
    <script src="lib/OrbitControls.js" type="text/javascript"></script>
    <script src="lib/dat.gui.min.js" type="text/javascript"></script>
    <script src="lib/OBJLoader.js" type="text/javascript"></script>
    <script src="lib/MTLLoader.js" type="text/javascript"></script>

    <script src="js/FPSButton.js" type="text/javascript"></script>
    <script src="js/PauseButton.js" type="text/javascript"></script>
    <script src="js/Engine.js" type="text/javascript"></script>
    <script src="js/Main.js" type="text/javascript"></script>
    <script src="js/EventHandler.js" type="text/javascript"></script>


</head>

<body>

<script id="fragmentShader" type="x-shader/x-fragment">
uniform float time;
uniform vec3 outColor;

uniform sampler2D tex;

varying vec2 Texcoord;

const int NUM = 9;
const float threshold = 0.05;

vec2 c[NUM];


vec3 col[NUM];




void main()
{
int i;

     c[0] = vec2(-0.0078125, 0.0078125);
  c[1]= vec2( 0.00 , 0.0078125);
 c[2]=vec2( 0.0078125, 0.0078125);
  c[3]=vec2(-0.0078125, 0.00 );
 c[4]=vec2( 0.0, 0.0 );
 c[5] =vec2( 0.0078125, 0.007 );
 c[6]=vec2(-0.0078125,-0.0078125);
  c[7]=vec2( 0.00 , -0.0078125);
 c[8] = vec2( 0.0078125,-0.0078125);

  for (i=0; i < NUM; i++) {
    col[i] = texture2D(tex, Texcoord.xy + c[i]);
  }

  vec3 rgb2lum = vec3(0.30, 0.59, 0.11);
  float lum[9];
  for (i = 0; i < NUM; i++) {
    lum[i] = dot(col[i].xyz, rgb2lum);
  }

  float newLum5 = lum[5] + lum[5];
  float newLum3 = lum[3] + lum[3];
  float newLum1 = lum[1] + lum[1];
  float newLum7 = lum[7] + lum[7];

  float x = lum[2]+ lum[8]+ newLum5-lum[0]- newLum3-lum[6];
  float y = lum[6]+newLum7+ lum[8]-lum[0]-newLum1-lum[2];

  float edge =(x*x + y*y < threshold) ? 1.0 : 0.0;

  vec3 edgeVec = vec3(edge,0,0);

  gl_FragColor = vec4(col[5].xyz * edgeVec.xxx, 1.0);
}

</script>

<script id="vertexShader" type="x-shader/x-vertex">

float Brightness;
uniform sampler2D tex;

varying vec2 Texcoord;

void main()
        {
            vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
            Texcoord = (projectionMatrix * mvPosition).xy;
            gl_Position = projectionMatrix * mvPosition;
        }
</script>



</body>
</html>